{"version":3,"sources":["components/AppTitle.js","components/FormInput.js","components/Spinners.js","components/CardItem.js","components/CardDescription.js","shared/constants.js","containers/DictionaryBox.js","App.js","serviceWorker.js","index.js"],"names":["AppTitle","title","Row","className","Col","FormInput","handleChange","handleSubmit","Form","onSubmit","type","id","placeholder","onChange","Button","variant","Spinners","Spinner","animation","CardItem","array","openDescriptionContent","useEffect","AOS","init","length","map","item","key","defid","data-aos","onClick","word","definition","CardDescription","object","closeDescriptionContent","author","written","written_on","example","URBAN_KEY","headers","DictionaryBox","props","useState","wordCards","setWordCards","inputWord","setInputWord","isAdditionalContent","setIsAdditionalContent","isLoading","setIsLoading","cardDescription","setCardDescription","Container","event","console","log","target","value","preventDefault","axios","get","then","res","data","list","catch","err","content","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5030236d.chunk.js","sourcesContent":["import React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nexport const AppTitle = ({ title }) => {\n  return (\n    <>\n      <Row className=\"\">\n        <Col className=\"text-center urban-title\">\n          <h1>{title}</h1>\n        </Col>\n      </Row>\n    </>\n  );\n};\n","import React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nexport const FormInput = ({ handleChange, handleSubmit }) => {\n  return (\n    <>\n      <Form className=\"form\" onSubmit={handleSubmit}>\n        <Row className=\"text-center\">\n          <Col className=\"\">\n            <input\n              type=\"text\"\n              className=\"form-control form-input\"\n              id=\"urban-words\"\n              placeholder=\"Enter any word what you want...\"\n              onChange={handleChange}\n            />\n            <Button variant=\"outline-success\" className=\"\" type=\"submit\">\n              Find words\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    </>\n  );\n};\n","import React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nexport const Spinners = () => {\n  return (\n    <>\n      <Row>\n        <Col className=\"spinners\">\n          <Spinner animation=\"grow\" variant=\"success\" />\n          <Spinner animation=\"grow\" variant=\"success\" />\n          <Spinner animation=\"grow\" variant=\"success\" />\n        </Col>\n      </Row>\n    </>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport AOS from \"aos\";\nimport Col from \"react-bootstrap/Col\";\n\nexport const CardItem = ({ array, openDescriptionContent }) => {\n  useEffect(() => {\n    AOS.init();\n  });\n  return (\n    <>\n      {array.length !== 0 ? (\n        array.map(item => (\n          <Col className=\"\" key={item.defid} data-aos=\"fade-left\">\n            <div\n              className=\"card-item\"\n              onClick={() => openDescriptionContent(item)}\n            >\n              <h3 className=\"card-item-title\">{item.word}</h3>\n              <p className=\"card-item-definition\">{item.definition}</p>\n            </div>\n          </Col>\n        ))\n      ) : (\n        <Col className=\"\" data-aos=\"fade-left\">\n          <div className=\"card-item card-item-nothing\">\n            <p className=\"text-center\">There aren't any word what you want!</p>\n          </div>\n        </Col>\n      )}\n    </>\n  );\n};\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\n\nexport const CardDescription = ({ object, closeDescriptionContent }) => {\n  const { definition, author, word, written_on: written, example } = object;\n  return (\n    <>\n      <div className=\"card-description\">\n        <h3 className=\"text-center card-description-title\">{word}</h3>\n        <div className=\"card-description-inner\">\n          <p>\n            <span>Definition: </span>\n            {definition}\n          </p>\n          <p>\n            <span>Example: </span>\n            {example}\n          </p>\n          <p>\n            <span>Author: </span>\n            {author}\n          </p>\n          <p>\n            <span>Date: </span>\n            {written}\n          </p>\n          {/* <i class=\"fas fa-thumbs-up\"></i> */}\n        </div>\n      </div>\n\n      <Button\n        variant=\"outline-success\"\n        className=\"close-button\"\n        onClick={closeDescriptionContent}\n      >\n        Close\n      </Button>\n    </>\n  );\n};\n","export const URBAN_KEY = {\n  headers: {\n    \"x-rapidapi-key\": \"fd7f461f40mshb035cc0f7e57873p193233jsna5e723db7381\"\n  }\n};\nexport const URL_API = \"https://mashape-community-urban-dictionary.p.rapidapi.com\";\n\n","import React, { useState, useEffect } from \"react\";\n\n// Connect axios\nimport axios from \"axios\";\nimport AOS from \"aos\";\n\n// Connect react-bootstrap\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nimport { AppTitle } from \"../components/AppTitle\";\nimport { FormInput } from \"../components/FormInput\";\nimport { Spinners } from \"../components/Spinners\";\nimport { CardItem } from \"../components/CardItem\";\nimport { CardDescription } from \"../components/CardDescription\";\n\n// connect other files\nimport \"./DictionaryBox.scss\";\nimport { URBAN_KEY, URL_API } from \"../shared/constants\";\n\nexport const DictionaryBox = props => {\n  const [wordCards, setWordCards] = useState([]);\n  const [inputWord, setInputWord] = useState(\"\");\n  const [isAdditionalContent, setIsAdditionalContent] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [cardDescription, setCardDescription] = useState({});\n\n  const handleChange = event => {\n    console.log(event.target.value);\n    setInputWord(event.target.value);\n  };\n\n  const openDescriptionContent = content => {\n    setCardDescription(content);\n    console.log(cardDescription);\n    setIsAdditionalContent(true);\n  };\n  const closeDescriptionContent = () => {\n    setIsAdditionalContent(false);\n  };\n  const handleSubmit = event => {\n    setIsLoading(true);\n    event.preventDefault();\n    axios\n      .get(`${URL_API}/define?term=${inputWord}`, URBAN_KEY)\n      .then(res => {\n        console.log(res.data.list);\n        const data = res.data.list;\n        setWordCards(data);\n        setIsLoading(false);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n  useEffect(() => {\n    AOS.init();\n  });\n\n  return (\n    <>\n      <section className=\"urban\">\n        <Container className=\"\">\n          <AppTitle title=\"Urban Dictionary\" />\n          <FormInput handleChange={handleChange} handleSubmit={handleSubmit} />\n          {isLoading ? (\n            <Spinners />\n          ) : (\n            <Row className=\"cards-box no-gutters\">\n              <CardItem\n                array={wordCards}\n                openDescriptionContent={openDescriptionContent}\n              />\n            </Row>\n          )}\n        </Container>\n        <div\n          className={\n            isAdditionalContent\n              ? \"card-description-container-open\"\n              : \"card-description-container-close\"\n          }\n        >\n          <div className=\"card-description-box\">\n            <CardDescription\n              object={cardDescription}\n              closeDescriptionContent={closeDescriptionContent}\n            />\n          </div>\n        </div>\n      </section>\n    </>\n  );\n};\n","import React from \"react\";\n\nimport { DictionaryBox } from \"./containers/DictionaryBox\";\n\nconst App = props => {\n  return (\n    <>\n      <DictionaryBox />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"../node_modules/aos/dist/aos.css\";\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}