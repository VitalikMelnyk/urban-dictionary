{"version":3,"sources":["store/reducers.js","shared/constants.js","store/actions.js","store/actionTypes.js","components/RandomComponent/RandomComponent.js","components/AppTitle.js","components/FormInput.js","components/Spinners.js","components/CardItem.js","components/CardDescription.js","containers/DictionaryBox.js","App.js","serviceWorker.js","index.js"],"names":["initialState","wordCards","inputWord","isAdditionalContent","isLoading","cardDescription","error","URBAN_KEY","headers","setIsAdditionalContent","payload","type","fetchData","action","axios","get","dispatch","then","res","data","catch","err","console","log","actionCreator","RandomComponent","AppTitle","title","Row","className","Col","FormInput","handleChange","handleSubmit","Form","onSubmit","id","placeholder","onChange","Button","variant","Spinners","Spinner","animation","CardItem","array","openDescriptionContent","useEffect","AOS","init","length","map","item","key","defid","data-aos","onClick","word","definition","CardDescription","object","closeDescriptionContent","author","written","written_on","example","DictionaryBox","props","useSelector","state","useDispatch","Container","event","inputValue","target","value","preventDefault","content","App","Boolean","window","location","hostname","match","thunkExample","applyMiddleware","thunk","store","createStore","list","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.00257cee.chunk.js","sourcesContent":["import {\r\n  SET_INPUT_WORD,\r\n  SET_CARD_DESCRIPTION,\r\n  SET_IS_ADDITIONAL_CONTENT,\r\n  FETCH_DATA_PENDING,\r\n  FETCH_DATA_SUCCESS,\r\n  FETCH_DATA_ERROR\r\n} from \"./actionTypes\";\r\n\r\nconst initialState = {\r\n  wordCards: [],\r\n  inputWord: \"\",\r\n  isAdditionalContent: false,\r\n  isLoading: false,\r\n  cardDescription: {},\r\n  error: null\r\n};\r\n\r\nexport const rootReducer = (state = initialState, { type, payload }) => {\r\n  console.log(state);\r\n  switch (type) {\r\n    case SET_INPUT_WORD:\r\n      return { ...state, inputWord: payload };\r\n    case SET_CARD_DESCRIPTION:\r\n      return { ...state, cardDescription: payload };\r\n    case SET_IS_ADDITIONAL_CONTENT:\r\n      return { ...state, isAdditionalContent: payload };\r\n    case FETCH_DATA_PENDING:\r\n      return { ...state, isLoading: true };\r\n    case FETCH_DATA_SUCCESS:\r\n      return { ...state, isLoading: false, wordCards: payload.list };\r\n    case FETCH_DATA_ERROR:\r\n      return { ...state, isLoading: false, error: payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const URBAN_KEY = {\r\n  headers: {\r\n    \"x-rapidapi-key\": \"fd7f461f40mshb035cc0f7e57873p193233jsna5e723db7381\"\r\n  }\r\n};\r\nexport const URL_API = \"https://mashape-community-urban-dictionary.p.rapidapi.com\";\r\n\r\n","import axios from \"axios\";\r\nimport {\r\n  SET_INPUT_WORD,\r\n  SET_CARD_DESCRIPTION,\r\n  SET_IS_ADDITIONAL_CONTENT,\r\n  FETCH_DATA\r\n} from \"./actionTypes\";\r\nimport { URL_API, URBAN_KEY } from \"../shared/constants\";\r\n\r\nexport const setInputWord = payload => ({\r\n  type: SET_INPUT_WORD,\r\n  payload\r\n});\r\n\r\nexport const setCardDescription = payload => ({\r\n  type: SET_CARD_DESCRIPTION,\r\n  payload\r\n});\r\n\r\nexport const setIsAdditionalContent = payload => ({\r\n  type: SET_IS_ADDITIONAL_CONTENT,\r\n  payload\r\n});\r\n\r\nexport const actionCreator = (type, action, dispatch) => {\r\n  dispatch({ type: `${type}_PENDING` });\r\n  action\r\n    .then(res => {\r\n      const data = res.data;\r\n      dispatch({ type: `${type}_SUCCESS`, payload: data });\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n      dispatch({ type: `${type}_ERROR`, payload: err });\r\n    });\r\n};\r\n\r\nexport const fetchData = inputWord => {\r\n  const action = axios.get(`${URL_API}/define?term=${inputWord}`, URBAN_KEY);\r\n  return dispatch => actionCreator(FETCH_DATA, action, dispatch);\r\n};\r\n","export const SET_INPUT_WORD = \"SET_INPUT_WORD\";\r\nexport const SET_CARD_DESCRIPTION = \"SET_CARD_DESCRIPTION\";\r\nexport const SET_IS_ADDITIONAL_CONTENT = \"SET_IS_ADDITIONAL_CONTENT\";\r\nexport const FETCH_DATA = \"FETCH_DATA\";\r\nexport const FETCH_DATA_PENDING = \"FETCH_DATA_PENDING\";\r\nexport const FETCH_DATA_SUCCESS = \"FETCH_DATA_SUCCESS\";\r\nexport const FETCH_DATA_ERROR = \"FETCH_DATA_ERROR\";\r\n","import React from 'react'\r\n\r\nconst RandomComponent = () => {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomComponent;\r\n","import React from \"react\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nimport RandomComponent from \"./RandomComponent\";\r\n\r\nexport const AppTitle = ({ title }) => {\r\n  return (\r\n    <>\r\n      <Row className=\"\">\r\n        <Col className=\"text-center urban-title\">\r\n          <h1>{title}</h1>\r\n          <RandomComponent />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport const FormInput = ({ handleChange, handleSubmit }) => {\r\n  return (\r\n    <>\r\n      <Form className=\"form\" onSubmit={handleSubmit}>\r\n        <Row className=\"text-center\">\r\n          <Col className=\"\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control form-input\"\r\n              id=\"urban-words\"\r\n              placeholder=\"Enter any word what you want...\"\r\n              onChange={handleChange}\r\n            />\r\n            <Button variant=\"outline-success\" className=\"\" type=\"submit\">\r\n              Find words\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\nexport const Spinners = () => {\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col className=\"spinners\">\r\n          <Spinner animation=\"grow\" variant=\"success\" />\r\n          <Spinner animation=\"grow\" variant=\"success\" />\r\n          <Spinner animation=\"grow\" variant=\"success\" />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport AOS from \"aos\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nexport const CardItem = ({ array, openDescriptionContent }) => {\r\n  useEffect(() => {\r\n    AOS.init();\r\n  });\r\n  return (\r\n    <>\r\n      {array.length !== 0 ? (\r\n        array.map(item => (\r\n          <Col className=\"\" key={item.defid} data-aos=\"fade-left\">\r\n            <div\r\n              className=\"card-item\"\r\n              onClick={() => openDescriptionContent(item)}\r\n            >\r\n              <h3 className=\"card-item-title\">{item.word}</h3>\r\n              <p className=\"card-item-definition\">{item.definition}</p>\r\n            </div>\r\n          </Col>\r\n        ))\r\n      ) : (\r\n        <Col className=\"\" data-aos=\"fade-left\">\r\n          <div className=\"card-item card-item-nothing\">\r\n            <p className=\"text-center\">There aren't any word what you want!</p>\r\n          </div>\r\n        </Col>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport const CardDescription = ({ object, closeDescriptionContent }) => {\r\n  const { definition, author, word, written_on: written, example } = object;\r\n  return (\r\n    <>\r\n      <div className=\"card-description\">\r\n        <h3 className=\"text-center card-description-title\">{word}</h3>\r\n        <div className=\"card-description-inner\">\r\n          <p>\r\n            <span>Definition: </span>\r\n            {definition}\r\n          </p>\r\n          <p>\r\n            <span>Example: </span>\r\n            {example}\r\n          </p>\r\n          <p>\r\n            <span>Author: </span>\r\n            {author}\r\n          </p>\r\n          <p>\r\n            <span>Date: </span>\r\n            {written}\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <Button\r\n        variant=\"outline-success\"\r\n        className=\"close-button\"\r\n        onClick={closeDescriptionContent}\r\n      >\r\n        Close\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n// Connect axios\r\nimport AOS from \"aos\";\r\n// Connect react-bootstrap\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\n// Redux files\r\nimport {\r\n  setInputWord,\r\n  setCardDescription,\r\n  setIsAdditionalContent,\r\n  fetchData\r\n} from \"../store/actions\";\r\n\r\n// connect other files\r\nimport { AppTitle } from \"../components/AppTitle\";\r\nimport { FormInput } from \"../components/FormInput\";\r\nimport { Spinners } from \"../components/Spinners\";\r\nimport { CardItem } from \"../components/CardItem\";\r\nimport { CardDescription } from \"../components/CardDescription\";\r\nimport \"./DictionaryBox.scss\";\r\n\r\nexport const DictionaryBox = props => {\r\n  const {\r\n    wordCards,\r\n    inputWord,\r\n    isAdditionalContent,\r\n    isLoading,\r\n    cardDescription,\r\n  } = useSelector(state => state);\r\n  const dispatch = useDispatch();\r\n  console.log(inputWord);\r\n\r\n  const handleChange = event => {\r\n    const inputValue = event.target.value;\r\n    dispatch(setInputWord(inputValue));\r\n  };\r\n\r\n  const openDescriptionContent = content => {\r\n    dispatch(setCardDescription(content));\r\n    console.log(cardDescription);\r\n    dispatch(setIsAdditionalContent(true));\r\n  };\r\n\r\n  const closeDescriptionContent = () => {\r\n    dispatch(setIsAdditionalContent(false));\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    dispatch(fetchData(inputWord));\r\n  };\r\n\r\n  useEffect(() => {\r\n    AOS.init();\r\n  });\r\n\r\n  return (\r\n    <section className=\"urban\">\r\n      <Container className=\"\">\r\n        <AppTitle title=\"Urban Dictionary\" />\r\n        <FormInput handleChange={handleChange} handleSubmit={handleSubmit} />\r\n        {isLoading ? (\r\n          <Spinners />\r\n        ) : (\r\n          <Row className=\"cards-box no-gutters\">\r\n            <CardItem\r\n              array={wordCards}\r\n              openDescriptionContent={openDescriptionContent}\r\n            />\r\n          </Row>\r\n        )}\r\n      </Container>\r\n      <div\r\n        className={\r\n          isAdditionalContent\r\n            ? \"card-description-container-open\"\r\n            : \"card-description-container-close\"\r\n        }\r\n      >\r\n        <div className=\"card-description-box\">\r\n          <CardDescription\r\n            object={cardDescription}\r\n            closeDescriptionContent={closeDescriptionContent}\r\n          />\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { DictionaryBox } from \"./containers/DictionaryBox\";\r\n\r\nconst App = props => <DictionaryBox />\r\n  \r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n// redux tools\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport thunk from \"redux-thunk\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { rootReducer } from \"./store/reducers\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../node_modules/aos/dist/aos.css\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nconst thunkExample = applyMiddleware(thunk);\r\n// const devtools = composeWithDevTools();\r\n// const enhanced = {\r\n//   thunkExample,\r\n//   devtools\r\n// };\r\n\r\nconst store = createStore(rootReducer, thunkExample);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}